configfile: '/uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/scripts/process_lee-six/config.yaml'
out_dir: str = config["output_directory"]
in_dir: str = config["input_directory"]
reference_lee_six: str = config["reference_lee_six"]
samples: list[str] = config["samples"]
donors: list[str] = config["donors"]


### IMPORTS ###
import os
import glob
import re

# Wildcard constraints; should all be alphanumeric
wildcard_constraints:
    sample = "[A-Za-z0-9_-]+",
    chroms = "[A-Za-z0-9]+",
    i = "[0-9]+",
    out_dir = out_dir,
    donor = "[A-Za-z0-9]+"

matches = config["matches"]

def get_donor(sample, matches):
    for donor, samples in matches.items():
        if sample in samples['crypt_samples']:
            return donor
    raise KeyError(f"Sample {sample} not found in matches dictionary")

rule all:
    input:
        expand(out_dir + "/sam_sorted/{sample}_R1.fastq.gz",
            sample = samples),
        expand(out_dir + "/sam_sorted/{sample}_R2.fastq.gz",
            sample = samples)

rule lee_six_fastq:
    input:
        cram = lambda wildcards: f"{in_dir}/{get_donor(wildcards.sample, matches)}/{wildcards.sample}.cram"
    params:
        reference_lee_six = config["reference_lee_six"]
    output:
        r1 = out_dir + "/sam_sorted/{sample}_R1.fastq.gz",
        r2 = out_dir + "/sam_sorted/{sample}_R2.fastq.gz"
    threads: 8
    envmodules:
        "samtools/1.16"
    shell:
        """
        echo "Sorting and converting {input.cram} to fastq for {wildcards.sample}"
        samtools sort -n -@ {threads} {input.cram} \
            | samtools fastq --reference {params.reference_lee_six} -1 {output.r1} -2 {output.r2} -
        """