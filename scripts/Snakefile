### SEMIColon Snakemake
## This Snakemake Pipeline is the workflow for the
## SEMIColon thesis project. The commands run are:
## *RULES WILL GO HERE
##
# Laurel Hiatt 04/10/2025

#################
### LIBRARIES ###
#################

import os
import glob
import re

##############
### INPUTS ###
##############
# The input, output, genome fasta, etc are specified in the
# accompanying "CCconfig.yaml".

configfile: '../data/config/snakemake_config/CCconfig.yaml'

## directories
top_dir = config["top_directory"]
in_dir: str = config["input_directory"]
out_dir: str = config["output_directory"]

# reference data
reference: str = config["reference_genome"]
reference_index: str = config["reference_genome_index"]
chroms = ["chr1","chr2","chr3","chr4","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
    "chr13","chr14","chr15","chr16","chr17", "chr18","chr19","chr20","chr21","chr22","chrX","chrY"]

# study data
samples: list[str] = config["samples"]
donors: list[str] = config["donors"]
matches = config["matches"]

#parameters
nchunks = config["nchunks"]
chunks = list(range(1,nchunks+1))

######################
### INITIALIZATION ###
######################

# Wildcard constraints; should all be alphanumeric
wildcard_constraints:
    sample = "[A-Za-z0-9_-]+",
    chroms = "[A-Za-z0-9]+",
    i = "[0-9]+",
    out_dir = out_dir,
    donor = "[A-Za-z0-9]+"

# Ensure sample_files is initialized
sample_files = {}

# Create directories.
if not os.path.exists(out_dir):
    os.mkdir(out_dir)

############################
###       PIPELINE       ###
############################

# Define functions for memory during retries.
def mem_xsmall(wildcards, attempt):
    return attempt * 4000

def mem_small(wildcards, attempt):
    return attempt * 8000

def mem_medium(wildcards, attempt):
    return attempt * 16000

def mem_large(wildcards, attempt):
    return attempt * 32000

def mem_xlarge(wildcards, attempt):
    return attempt * 64000

### find all fastq data for samples; useful for top-off sequencing
for sample in samples:
    matching_dirs = glob.glob(f"{top_dir}/**/{sample}", recursive=True)
    for subdir in matching_dirs:
        subdir_files = glob.glob(f"{subdir}/*.fastq.gz")
        r1_files = [f for f in subdir_files if "_R1" in f]
        r2_files = [f for f in subdir_files if "_R2" in f]

        if sample not in sample_files:
            sample_files[sample] = {'R1': [], 'R2': []}

        sample_files[sample]['R1'].extend(r1_files)
        sample_files[sample]['R2'].extend(r2_files)

def get_donor(sample, matches):
    for donor, samples in matches.items():
        if sample in samples['crypt_samples']:
            return donor
    raise KeyError(f"Sample {sample} not found in matches dictionary")

#############
### RULES ###
#############

include: "rules/0_merge_fastq.smk"
include: "rules/1_fastp.smk"
include: "rules/2_make_bams.smk"
include: "rules/3_check_bams.smk"
include: "rules/4_make_vcfs.smk"
include: "rules/5_check_vcfs.smk"
include: "rules/6_filter_vcfs.smk"

rule all:
    # final output
    input:
        expand(
            out_dir + "/fastq/{sample}_R1.clean.fastq.gz",
            sample = samples,
        ),
        expand(
            out_dir + "/bam/{sample}-sorted.bam.bai",
            sample = samples,
        ),
        expand(
            out_dir + "/bam/{sample}-sorted.stats",
            sample = samples
        ),
        expand(
            out_dir + "/mosdepth/{sample}.mosdepth.global.dist.txt",
            sample = samples
        ),
        expand(
            out_dir + "/vcf/{donor}-annotated-var.vcf.gz",
            donor = donors
        ),
        expand(
            out_dir + "/reports/{sample}-fastp-report.json",
            sample=samples,
        ),
        expand(
            out_dir + "/mosdepth/mosdepth_coverage.html",
        ),
        expand(
            out_dir + "/alfred/{sample}.pdf",
            sample = samples
        ),
        expand(
            out_dir + "/vcf/{donor}-vcf_stats.txt",
            donor = donors
        ),
        expand(
            out_dir + "/somalier/{donor}/relate.samples.tsv",
            donor = donors
        ),
        expand(
            out_dir + "/vcf/{donor}/summary.pdf",
            donor = donors
        ),
        expand(
            out_dir + "/vcf/{donor}-annotated-var-noLCR.vcf.gz",
            donor = donors
        )