import os
import glob
import re

configfile: "/uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/data/config/snakemake_config/CCconfig.yaml"
samples: list[str] = config["samples"]
out_dir: str = config["output_directory"]
donors: list[str] = config["donors"]
matches = config["matches"]

# Wildcard constraints; should all be alphanumeric
wildcard_constraints:
    sample = "[A-Za-z0-9_-]+",
    chroms = "[A-Za-z0-9]+",
    i = "[0-9]+",
    out_dir = out_dir,
    donor = "[A-Za-z0-9]+"

def get_donor(sample, matches):
    for donor, samples in matches.items():
        if sample in samples['crypt_samples']:
            return donor
    raise KeyError(f"Sample {sample} not found in matches dictionary")

sample_to_donor = {sample: donor for donor, data in matches.items() for sample in data['crypt_samples']}

def get_sample(donor, sample_to_donor):
    for sample, d in sample_to_donor.items():
        if d == donor:
            return sample

donor_sample_pairs = [(get_donor(sample, matches), sample) for sample in samples]

donor_sample_pairs[:] = [pair for pair in donor_sample_pairs if pair[0] != "GB84"]

rule all:
    input:
        expand(out_dir + "/results/{donor}/{sample}_snv_count.txt", donor = [pair[0] for pair in donor_sample_pairs],
               sample = [pair[1] for pair in donor_sample_pairs])
        # expand(out_dir + "/results/{donor}/{sample}_filtered.vcf.gz", out_dir = out_dir, donor = donors, sample= s in get_samples_for_donor(donor, matches))

### filter all variants by depth > 5
rule filter_by_depth:
    input:
        filtered_vcf= out_dir + "/vcf/{donor}-annotated-var-noLCR.vcf.gz"
    output:
        depth_vcf= temp(out_dir + "/results/{donor}-depth-filtered.vcf.gz")
    shell:
        """
        ./vcfexpress filter -e 'return all(function (dp) return dp > 5 end, variant:format("DP"))' -o {output.depth_vcf} {input.filtered_vcf}
        """

### it shouldn't exist in gnomad (at this point, pre-blood)
rule filter_by_gnomad:
    input:
        depth_vcf= out_dir + "/results/{donor}-depth-filtered.vcf.gz"
    output:
        gnomad_vcf= temp(out_dir + "/results/{donor}-gnomad-filtered.vcf.gz")
    shell:
        """
        module load bcftools
        bcftools filter -i '(gnomad_popmax_af <= 0 || gnomad_popmax_af == ".")' {input.depth_vcf} -o -Oz {output.gnomad_vcf}
        """

### all the other samples must have 0 alt alleles
rule filter_by_sample:
    input:
        gnomad_vcf = out_dir + "/results/{donor}-gnomad-filtered.vcf.gz"
    output:
        done = temp(out_dir + "/results/{donor}/{sample}_filtered.done")
    params:
        sample_vcf = lambda wildcards: out_dir + f"/results/{wildcards.donor}/{wildcards.sample}_filtered_noAD.vcf.gz",
        soi_lua = lambda wildcards: temp(out_dir + f"/results/{wildcards.sample}_soi.lua"),
        soi = lambda wildcards: f'samplesOfInterest = {{"{wildcards.donor}_{wildcards.sample}"}}'
    shell:
        """
        mkdir -p {out_dir}/results/{wildcards.donor}/
        echo '{params.soi}' > {params.soi_lua}
        ./vcfexpress filter \
            -p {params.soi_lua} \
            -p /uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/data/config/sample-groups.lua \
            -e 'return all_none(function(ad) return #ad > 1 and ad[2] > 0 end, sampleIndexes, variant:format("AD"))' \
            -o {params.sample_vcf} {input.gnomad_vcf}
        touch {output.done}
        """

### this sample must have > # alternate allele
rule filter_by_alt_depth:
    input:
        out_dir + "/results/{donor}/{sample}_filtered.done"
    output:
        vcf= out_dir + "/results/{donor}/{sample}_filtered.vcf.gz"
    params:
        sample_vcf= out_dir + "/results/{donor}/{sample}_filtered_noAD.vcf.gz",
        sample = lambda wildcards: wildcards.sample,
        soi_lua= temp(out_dir + "results/{sample}_soi.lua"),
        donor = lambda wildcards: get_donor(wildcards.sample, matches)
    shell:
        """
        echo 'samplesOfInterest = {{"{params.donor}_{params.sample}"}}' > {params.soi_lua}
        ./vcfexpress filter -p {params.soi_lua} -p /uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/data/config/sample-groups.lua -e 'return all_none(function(ad) return #ad > 1 and ad[2] > 2 end, sampleIndexes, variant:format("AD"))' -o {output.vcf} {params.sample_vcf}
        """

rule count_snvs:
    input:
        vcf= out_dir + "/results/{donor}/{sample}_filtered.vcf.gz",
    output:
        txt= out_dir + "/results/{donor}/{sample}_snv_count.txt"
    shell:
        "bcftools view -v snps {input.vcf} | grep -v '^#' | wc -l > {output.txt} || echo 0 > {output.txt}"
