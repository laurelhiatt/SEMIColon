import os
import glob
import re

configfile: "/uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/data/config/snakemake_config/CCconfig.yaml"
samples: list[str] = config["samples"]
out_dir: str = config["output_directory"]
donors: list[str] = config["donors"]
matches = config["matches"]

# Wildcard constraints; should all be alphanumeric
wildcard_constraints:
    sample = "[A-Za-z0-9_-]+",
    chroms = "[A-Za-z0-9]+",
    i = "[0-9]+",
    out_dir = out_dir,
    donor = "[A-Za-z0-9]+"

def get_donor(sample, matches):
    for donor, samples in matches.items():
        if sample in samples['crypt_samples']:
            return donor
    raise KeyError(f"Sample {sample} not found in matches dictionary")

sample_to_donor = {sample: donor for donor, data in matches.items() for sample in data['crypt_samples']}

def get_sample(donor, sample_to_donor):
    for sample, d in sample_to_donor.items():
        if d == donor:
            return sample

pairs = [
    (get_donor(sample, matches), sample)
    for sample in samples
    if get_donor(sample, matches) != "GB84"
]

if pairs:
    donors, filtered_samples = zip(*pairs)
else:
    donors, filtered_samples = [], []

rule all:
    input:
        [
            f"{out_dir}/results/{donor}/{sample}_snv_count.txt"
            for donor, sample in zip(donors, filtered_samples)
        ]

### filter all variants by depth > 5
rule filter_by_depth:
    input:
        filtered_vcf= out_dir + "/vcf/{donor}-annotated-var-noLCR.vcf.gz"
    output:
        depth_vcf= temp(out_dir + "/results/{donor}-depth-filtered.vcf.gz")
    shell:
        """
        ./vcfexpress filter -e 'return all(function (dp) return dp > 5 end, variant:format("DP"))' -o {output.depth_vcf} {input.filtered_vcf}
        """

rule index_depth:
    input:
        depth_vcf= out_dir + "/results/{donor}-depth-filtered.vcf.gz"
    output:
        indexed_vcf= temp(out_dir + "/results/{donor}-depth-filtered.vcf.gz.tbi")
    threads:
        8
    shell:
        """
        tabix -f -p vcf {input.depth_vcf} --threads {threads}
        """

### it shouldn't exist in gnomad (at this point, pre-blood)
rule filter_by_gnomad:
    input:
        depth_vcf= out_dir + "/results/{donor}-depth-filtered.vcf.gz",
        indexed_vcf= out_dir + "/results/{donor}-depth-filtered.vcf.gz.tbi"
    output:
        gnomad_vcf= out_dir + "/results/{donor}-gnomad-filtered.vcf.gz",
        done = out_dir + "/results/{donor}/gnomad.done"
    shell:
        """
        module load bcftools
        bcftools filter -i '(gnomad_popmax_af <= 0 || gnomad_popmax_af == ".")' -Oz -o {output.gnomad_vcf} {input.depth_vcf}
        touch {output.done}
        """

def donor_done_input(wildcards):
    donor = wildcards.donor
    sample = wildcards.sample
    crypt_samples = matches.get(donor, {}).get("crypt_samples", [])
    if sample not in crypt_samples:
        pass
    return os.path.join(out_dir, "results", donor, "gnomad.done")

rule make_lua:
    input:
        gnomad_done = donor_done_input,
    output:
        lua = out_dir + "/results/{donor}/{sample}_soi.lua"
    run:
        with open(output.lua, "w") as f:
            f.write(f'samplesOfInterest = {{"{wildcards.donor}_{wildcards.sample}"}}\n')

### all the other samples must have 0 alt alleles
rule filter_by_sample:
    input:
        lua = rules.make_lua.output.lua,
    output:
        sample_vcf = temp(out_dir + "/results/{donor}/{sample}_filtered_noAD.vcf.gz")
    params:
        gnomad_vcf = out_dir + "/results/{donor}-gnomad-filtered.vcf.gz"
    shell:
        """
        ./vcfexpress filter -p {input.lua} -p /uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/data/config/sample-groups.lua \
            -e 'return all_none(function(ad) return #ad > 1 and ad[2] > 0 end, sampleIndexes, variant:format("AD"))' \
            -o {output.sample_vcf} {params.gnomad_vcf}
        """

### this sample must have > # alternate allele
rule filter_by_alt_depth:
    input:
        sample_vcf= out_dir + "/results/{donor}/{sample}_filtered_noAD.vcf.gz",
        lua = rules.make_lua.output.lua,
    output:
        vcf= out_dir + "/results/{donor}/{sample}_filtered.vcf.gz",
    shell:
        """
        ./vcfexpress filter -p {input.lua} -p /uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/data/config/sample-groups.lua -e 'return all_none(function(ad) return #ad > 1 and ad[2] > 2 end, sampleIndexes, variant:format("AD"))' -o {output.vcf} {input.sample_vcf}
        """

rule count_snvs:
    input:
        vcf= out_dir + "/results/{donor}/{sample}_filtered.vcf.gz",
    output:
        txt= out_dir + "/results/{donor}/{sample}_snv_count.txt"
    params:
        sample = "{sample}"
    conda:
        "/uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/envs/cyvcf2.yaml"
    shell:
        """
        python /uufs/chpc.utah.edu/common/HIPAA/u1264408/u1264408/Git/SEMIColon/scripts/mutations/per-sample-report.py {input.vcf} | grep "{params.sample}" > {output.txt}
        """
